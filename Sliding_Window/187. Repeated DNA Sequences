//first approach

class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        List<String> ans = new ArrayList<>();
        HashMap<String, Integer> map = new HashMap<>();
        for(int i=0; i<s.length() - 9; i++){
            String str = s.substring(i, i+10);
            map.put(str, map.getOrDefault(str, 0)+1);
        }
        for(Map.Entry<String, Integer>e: map.entrySet()){
            if(e.getValue() > 1){
                ans.add(e.getKey());
            }
        }
        return ans;
    }
}

//second approach

class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        
        HashMap<String, Integer> freq = new HashMap<>();
        for(int i=0; i<s.length() - 9; i++){
            String str = s.substring(i, i+10);
            freq.put(str, freq.getOrDefault(str, 0)+1);
        }
        //using java 8
        return freq.entrySet().stream().filter(e-> e.getValue() > 1).map(e->e.getKey()).collect(Collectors.toList());
    }
}

//3rd approach

//it's time complexity is very less.
// it is done in the O(n)
class Solution {
    public List<String> findRepeatedDnaSequences(String s) {
        HashSet<String> seen = new HashSet<>(), repeated = new HashSet<>();
        for(int i=0; i<s.length() - 9; i++){
            String str = s.substring(i, i+10);
            if(seen.contains(str)){
                repeated.add(str);
            }
            seen.add(str);
        }
        return new ArrayList(repeated);
    }
}
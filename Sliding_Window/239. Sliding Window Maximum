class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int[] ans = new int[n-k+1];
        int[] nge = new int[n];
        Stack<Integer> st = new Stack<>();
        st.push(nums.length - 1);
        nge[nums.length - 1] = nums.length;
        //finding next greater element
        for(int i=n-2; i>=0; i--){
            while(st.size() > 0 && nums[i] >= nums[st.peek()]){
                st.pop();
            }
            if(st.size() == 0){
                nge[i] = nums.length;
            }else{
                nge[i] = st.peek();
            }
            st.push(i);
        }

//here, finding sliding window maximum
        int j = 0;
        for(int i=0; i<=n-k; i++){
            if(j < i){
                j = i;
            }
            while(nge[j] < i+k){
                j = nge[j];
            }
            ans[i] = nums[j];
        }
        return ans;
    }
}